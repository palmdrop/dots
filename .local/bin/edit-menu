#!/bin/bash

# Input file should be formatted like this:
#   path1 name1
#   path2 name2
#   ...

# Declare associative array
declare -A paths

case $1 in
    file) 
        # Check if file exists
        if [ ! -f "$2" ]; then
            echo "File does not exist."
            exit 0
        fi

        # Iterate over every line in file
        while IFS= read -r line
        do
            # Ignore empty lines
            [ -z "$line" ] && continue

            # Split into words
            words=($line)

            # Add association between words
            paths+=([${words[1]}]=${words[0]})
        done < "$2"
    ;;
    dir)
        # Check if file exists
        if [ ! -d "$2" ]; then
            echo "Directory does not exist."
            exit 0
        fi

        # Get all files in directory, ignore directories
        #files=$(ls -ap $2 | grep -v '/$')
        files=$(ls -pa $2)
        dir=$2 

        if [[ "$dir" != "*/" ]];
        then
            dir="$dir/"
        fi

        while IFS= read -r line; do
            paths+=([$line]=$dir$line)
        done <<< "$files"
    ;;
    dirs)
        # Check if file exists
        if [ ! -f "$2" ]; then
            echo "File does not exist."
            exit 0
        fi

        # Get user choice
        directory=$(cat $2 | dmenu -i -F -p "directory")
        
        # Expand potential use of ~
        eval directory=$directory

        # Call for editing files in that directory
        edit-menu dir $directory &
        exit 1
    ;;
    *)
        echo "Invalid option."
        exit 0
    ;;
esac

# Read user choice using dmenu
choice=$(printf "%s\n" "${!paths[@]}" | dmenu -i -F -p "edit")

# Exit if no choice
[ -z "$choice" ] && exit 1

path=${paths[$choice]}

# If choice is a directory, open recursively
if [ -d "${path}" ] ; then
    edit-menu dir $path
else
    # Open chosen file in vim
    eval "$TERMINAL -e nvim $path"
fi
