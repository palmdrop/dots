#!/bin/sh

# If the "all" flag is passed, show all hidden nodes, nost just local ones.
if [ "$1" = "--all" ]; then
    win_cmd=".hidden.window"
else
    win_cmd=".hidden.local.window"
fi

# Declare an associative array which will hold window names and
# their associated id's.
declare -A windows

# Iterate over all matching window id's
# TODO fix problem with windows having identical info
while read -r id 
do
    # Get window information
    info=$(xwininfo -id $id | awk -F\" 'NR==2')

    # Continue if no information is provided (no actual window)
    [ -z "$info" ] && continue

    # Parse everything between the double quotes. 
    # This will be the name of the window
    info=${info#*\"}
    info=${info%\"*}

    # If the "all" flag is passed, prepend the workspace name 
    if [ "$1" = "--all" ]; then
        ws=$(bspc query -D -n $id --names)
        info="$ws    $info"
    fi

    # Check if there already exists an entry with the same key
    while [ ! -z "${windows[$info]}" ]
    do
        # append a space to the key until there's no longer a matching key
        info="$info "
    done

    # Associate the window information with the id
    windows+=([$info]=$id)

done <<< $(bspc query -N -n $win_cmd)

# Exit if array is empty
[ -z "${windows[@]}" ] && {
    notify-send -u low "No hidden windows"
    exit 0
}

# Get user choice
choice=$(printf "%s\n" "${!windows[@]}" | dmenu -i -F -p "Unhide")

# If no choice, exit
[ -z "$choice" ] && exit 1

# Get the id of the user choice
id=${windows[$choice]}

# Unhide the chosen window and focus
bspc node $id --flag hidden=off
bspc node -f $id
